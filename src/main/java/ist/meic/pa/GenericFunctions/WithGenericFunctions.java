package ist.meic.pa.GenericFunctions;

import javassist.*;
import javassist.expr.ExprEditor;
import javassist.expr.MethodCall;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class WithGenericFunctions {
    public static void main(String[] args) {
        ArrayList<Method> methodsThatFit = new ArrayList<>();

        if (args.length < 1){
            System.out.println("Need a class name");
            throw new IllegalArgumentException();
        } else {
            System.out.println("Class : " + args[0]);

            ClassPool cp = ClassPool.getDefault();
            CtClass ctClass = null;
            try {
                ctClass = cp.get(args[0]);
                CtMethod method = ctClass.getDeclaredMethod("main");
                //method.insertBefore("System.out.println(\"www\");");
                //ctClass.writeFile();
                //Class<?> rtClass = ctClass.toClass();
                //Method main = rtClass.getMethod("main", args.getClass());
                //String[] restArgs = new String[args.length - 2];
                //System.arraycopy(args, 2, restArgs, 0, restArgs.length);
                //main.invoke(null, new Object[] { restArgs });

                try {
                    method.instrument(new ExprEditor() {
                        public void edit(MethodCall m) {
                            try {
                                Class calledClass = Class.forName(m.getClassName());
                                CtMethod calledMethod = m.getMethod();
                                if (calledClass.isAnnotationPresent(GenericFunction.class)){
                                    System.out.println("Possible methods that fit the method call:");
                                    for (Method method : calledClass.getDeclaredMethods()){
                                        if (method.getName().equals(calledMethod.getName()) &&
                                            method.getParameterCount() == calledMethod.getParameterTypes().length &&
                                            Modifier.isStatic(method.getModifiers())){
                                            methodsThatFit.add(method);
                                            System.out.println(method);
                                        }
                                    }
                                    //TODO: get parameters from called method and their types
                                    //TODO: compare them with the methods in methodsThatFit
                                    Class[] calledParameters = new Class[] {Integer.class, String.class};
                                    int curr = 0;
                                    Boolean found = true;
                                    for (Class a : calledParameters){
                                        ArrayList<Integer> distances = new ArrayList<>();
                                        for (Method me : methodsThatFit){
                                            Class b = me.getParameterTypes()[curr];
                                            int dist = 0;
                                            Class aux = a;
                                            while (!aux.equals(b)){
                                                dist++;
                                                aux = aux.getSuperclass();
                                                if (aux == null){
                                                    dist = Integer.MAX_VALUE;
                                                    break;
                                                }
                                            }
                                            distances.add(dist);
                                        }

                                        int min = distances.get(0);
                                        for (int i : distances){
                                            min = min < i ? min : i;
                                        }

                                        //if no method fits
                                        if (min == Integer.MAX_VALUE) {
                                            System.out.println("Can't call any method!");
                                            found = false;
                                            break;
                                        }

                                        Iterator<Integer> it = distances.iterator();
                                        Iterator<Method> it2 = methodsThatFit.iterator();
                                        while (it.hasNext()) {
                                            it2.next();
                                            if (it.next() != min) {
                                                it.remove();
                                                it2.remove();
                                            }
                                        }

                                        //if no method fits
                                        if (methodsThatFit.size() == 0) {
                                            System.out.println("Can't call any method!");
                                            found = false;
                                            break;
                                        }

                                        curr++;
                                    }

                                    if (found)
                                        for (Method aba : methodsThatFit){
                                            System.out.println("Chosen method:");
                                            System.out.println(aba);
                                        }

                                    //TODO: choose from left to right the best one

                                    //suggestion for the next part
                                    //TODO: then change the chosen method name to 'methodName2'
                                    //TODO: and change the method call to call the method 'methodName2'
                                }
                            } catch (ClassNotFoundException e) {
                                e.printStackTrace();
                            } catch (NotFoundException e) {
                                e.printStackTrace();
                            }
                        }
                        });
                } catch (CannotCompileException e) {
                    e.printStackTrace();
                }
            } catch (NotFoundException e) {
                e.printStackTrace();
            }

            Loader classLoader = new Loader();
            System.out.println("Output:");
            try{
                classLoader.run(args[0], Arrays.copyOfRange(args, 1, args.length));
            }
            catch (Throwable t){
                System.out.println("class loader failed to run");
                t.printStackTrace();
            }
        }
    }
}