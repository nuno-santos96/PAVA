package ist.meic.pa.GenericFunctions;

import javassist.*;
import javassist.expr.ExprEditor;
import javassist.expr.MethodCall;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class WithGenericFunctions {
    public static void main(String[] args) {
        if (args.length < 1){
            System.out.println("Need a class name");
            throw new IllegalArgumentException();
        } else {
            System.out.println("Class : " + args[0]);
            try {
                ClassPool cp = ClassPool.getDefault();
                CtClass ctClass = cp.get(args[0]);
                CtMethod method = ctClass.getDeclaredMethod("main");
                method.instrument(new ExprEditor() {
                    public void edit(MethodCall m) {
                        try {
                            Class calledClass = Class.forName(m.getClassName());
                            CtMethod calledMethod = m.getMethod();
                            if (calledClass.isAnnotationPresent(GenericFunction.class)){
                                System.out.println("ist.meic.pa.GenericFunctions.Dispatcher.dispatch($args,\"" + calledClass.getName() + "\",\"" + calledMethod.getName() + "\");");
                                m.replace("$_ = ($r) ist.meic.pa.GenericFunctions.Dispatcher.dispatch($args,\"" + calledClass.getName() + "\",\"" + calledMethod.getName() + "\");");
                            }
                        } catch (ClassNotFoundException | NotFoundException |
                                 CannotCompileException e) {
                            e.printStackTrace();
                        } 
                    }
                });

                Class<?> rtClass = ctClass.toClass();
                Method main = rtClass.getMethod("main", String[].class);
                String[] params = null; // init params accordingly
                main.invoke(null, (Object) params);
            } catch (NotFoundException | NoSuchMethodException | IllegalAccessException |
                    InvocationTargetException | CannotCompileException e) {
                e.printStackTrace();
            } 

            /*Loader classLoader = new Loader();
            System.out.println("Output:");
            try{
                classLoader.run(args[0], Arrays.copyOfRange(args, 1, args.length));
            }
            catch (Throwable t){
                System.out.println("class loader failed to run");
                t.printStackTrace();
            }*/
        }
    }
}