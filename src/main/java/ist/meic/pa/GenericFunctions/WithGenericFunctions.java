package ist.meic.pa.GenericFunctions;

import javassist.*;
import javassist.expr.ExprEditor;
import javassist.expr.MethodCall;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class WithGenericFunctions {
    public static void main(String[] args) {
        if (args.length < 1){
            System.out.println("Need a class name");
            throw new IllegalArgumentException();
        } else {
            System.out.println("Class : " + args[0]);
            try {
                ClassPool cp = ClassPool.getDefault();
                CtClass ctClass = cp.get(args[0]);
                CtMethod method = ctClass.getDeclaredMethod("main");
                method.instrument(new ExprEditor() {
                    public void edit(MethodCall m) {
                        try {
                            CtClass calledClass = cp.get(m.getClassName());
                            CtMethod calledMethod = m.getMethod();
                            if (calledClass.getAnnotation(GenericFunction.class) != null){
                                m.replace("$_ = ($r) ist.meic.pa.GenericFunctions.Dispatcher.dispatch($args,\"" + calledClass.getName() + "\",\"" + calledMethod.getName() + "\");");
                                for (CtMethod me : calledClass.getDeclaredMethods()){
                                    if (me.getName().equals(calledMethod.getName()) &&
                                            me.getParameterTypes().length == calledMethod.getParameterTypes().length &&
                                            Modifier.isStatic(me.getModifiers())){

                                        me.instrument(new ExprEditor() {
                                            public void edit(MethodCall mc){
                                                try {
                                                    if (mc.getMethodName().equals(calledMethod.getName()) &&
                                                            mc.getMethod().getParameterTypes().length == calledMethod.getParameterTypes().length &&
                                                            Modifier.isStatic(mc.getMethod().getModifiers())){
                                                        mc.replace("$_ = ($r) ist.meic.pa.GenericFunctions.Dispatcher.dispatch($args,\"" + calledClass.getName() + "\",\"" + mc.getMethodName() + "\");");
                                                    }
                                                } catch (NotFoundException e) {
                                                    e.printStackTrace();
                                                } catch (CannotCompileException e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                        });
                                    }
                                }
                                calledClass.toClass();
                            }
                        } catch (ClassNotFoundException e) {
                            e.printStackTrace();
                        } catch (NotFoundException e) {
                            e.printStackTrace();
                        } catch (CannotCompileException e) {
                            e.printStackTrace();
                        }
                    }
                });

                Class<?> rtClass = ctClass.toClass();
                Method main = rtClass.getMethod("main", String[].class);
                String[] params = null; // init params accordingly
                main.invoke(null, (Object) params);
            } catch (NotFoundException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            } catch (NoSuchMethodException e) {
                e.printStackTrace();
            } catch (CannotCompileException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
    }
}