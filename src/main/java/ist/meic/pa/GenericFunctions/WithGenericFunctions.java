package ist.meic.pa.GenericFunctions;

import javassist.*;
import javassist.expr.ExprEditor;
import javassist.expr.MethodCall;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class WithGenericFunctions {
    public static void main(String[] args) {
        ArrayList<Method> methodsThatFit = new ArrayList<>();

        if (args.length < 1){
            System.out.println("Need a class name");
            throw new IllegalArgumentException();
        } else {
            System.out.println("Class : " + args[0]);

            ClassPool cp = ClassPool.getDefault();
            CtClass ctClass = null;
            try {
                ctClass = cp.get(args[0]);
                CtMethod method = ctClass.getDeclaredMethod("main");
                try {
                    method.instrument(new ExprEditor() {
                        public void edit(MethodCall m) {
                            try {
                                Class calledClass = Class.forName(m.getClassName());
                                CtMethod calledMethod = m.getMethod();
                                if (calledClass.isAnnotationPresent(GenericFunction.class)){
                                    System.out.println("Possible methods that fit the method call:");
                                    for (Method method : calledClass.getDeclaredMethods()){
                                        if (method.getName().equals(calledMethod.getName()) &&
                                            method.getParameterCount() == calledMethod.getParameterTypes().length &&
                                            Modifier.isStatic(method.getModifiers())){
                                            methodsThatFit.add(method);
                                            System.out.println(method);
                                        }
                                    }
                                    //TODO: get parameters from called method and their types
                                    //TODO: compare them with the methods in methodsThatFit
                                    //TODO: choose from left to right the best one

                                    //suggestion for the next part
                                    //TODO: then change the chosen method name to 'methodName2'
                                    //TODO: and change the method call to call the method 'methodName2'
                                }
                            } catch (ClassNotFoundException e) {
                                e.printStackTrace();
                            } catch (NotFoundException e) {
                                e.printStackTrace();
                            }
                        }
                        });
                } catch (CannotCompileException e) {
                    e.printStackTrace();
                }
            } catch (NotFoundException e) {
                e.printStackTrace();
            }

            Loader classLoader = new Loader();
            System.out.println("Output:");
            try{
                classLoader.run(args[0], Arrays.copyOfRange(args, 1, args.length));
            }
            catch (Throwable t){
                System.out.println("class loader failed to run");
                t.printStackTrace();
            }
        }
    }
}